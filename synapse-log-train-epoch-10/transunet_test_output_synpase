Namespace(volume_path='research/white-mold-applications/project_TransUNet/data/Synapse/test_vol_h5', dataset='Synapse', num_classes=9, list_dir='research/white-mold-applications/TransUNet/lists/lists_Synapse', max_iterations=20000, max_epochs=10, batch_size=24, img_size=224, is_savenii=True, n_skip=3, vit_name='R50-ViT-B_16', test_save_dir='research/white-mold-applications/model/predictions', deterministic=1, base_lr=0.01, seed=1234, vit_patches_size=16, Dataset=<class 'datasets_tun.dataset_synapse.Synapse_dataset'>, z_spacing=1, is_pretrain=True, exp='TU_Synapse224')
TU_pretrain_R50-ViT-B_16_skip3_epo10_bs24_224
arg.is_savenii: True - before inference
arg.is_savenii: True - if true
model: VisionTransformer(
  (transformer): Transformer(
    (embeddings): Embeddings(
      (hybrid_model): ResNetV2(
        (root): Sequential(
          (conv): StdConv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (gn): GroupNorm(32, 64, eps=1e-06, affine=True)
          (relu): ReLU(inplace=True)
        )
        (body): Sequential(
          (block1): Sequential(
            (unit1): PreActBottleneck(
              (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv1): StdConv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (downsample): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn_proj): GroupNorm(256, 256, eps=1e-05, affine=True)
            )
            (unit2): PreActBottleneck(
              (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv1): StdConv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit3): PreActBottleneck(
              (gn1): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv1): StdConv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 64, eps=1e-06, affine=True)
              (conv2): StdConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv3): StdConv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
          )
          (block2): Sequential(
            (unit1): PreActBottleneck(
              (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): StdConv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (downsample): StdConv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (gn_proj): GroupNorm(512, 512, eps=1e-05, affine=True)
            )
            (unit2): PreActBottleneck(
              (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit3): PreActBottleneck(
              (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit4): PreActBottleneck(
              (gn1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): StdConv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv2): StdConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv3): StdConv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
          )
          (block3): Sequential(
            (unit1): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (downsample): StdConv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (gn_proj): GroupNorm(1024, 1024, eps=1e-05, affine=True)
            )
            (unit2): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit3): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit4): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit5): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit6): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit7): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit8): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
            (unit9): PreActBottleneck(
              (gn1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): StdConv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (gn2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv2): StdConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (gn3): GroupNorm(32, 1024, eps=1e-06, affine=True)
              (conv3): StdConv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (patch_embeddings): Conv2d(1024, 768, kernel_size=(1, 1), stride=(1, 1))
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (encoder): Encoder(
      (layer): ModuleList(
        (0-11): 12 x Block(
          (attention_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): Mlp(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (attn): Attention(
            (query): Linear(in_features=768, out_features=768, bias=True)
            (key): Linear(in_features=768, out_features=768, bias=True)
            (value): Linear(in_features=768, out_features=768, bias=True)
            (out): Linear(in_features=768, out_features=768, bias=True)
            (attn_dropout): Dropout(p=0.0, inplace=False)
            (proj_dropout): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
        )
      )
      (encoder_norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
    )
  )
  (decoder): DecoderCup(
    (conv_more): Conv2dReLU(
      (0): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (blocks): ModuleList(
      (0): DecoderBlock(
        (conv1): Conv2dReLU(
          (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (conv2): Conv2dReLU(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
      )
      (1): DecoderBlock(
        (conv1): Conv2dReLU(
          (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (conv2): Conv2dReLU(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
      )
      (2): DecoderBlock(
        (conv1): Conv2dReLU(
          (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (conv2): Conv2dReLU(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
      )
      (3): DecoderBlock(
        (conv1): Conv2dReLU(
          (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (conv2): Conv2dReLU(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (up): UpsamplingBilinear2d(scale_factor=2.0, mode='bilinear')
      )
    )
  )
  (segmentation_head): SegmentationHead(
    (0): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Identity()
  )
)
test_save_path: research/white-mold-applications/model/predictions/TU_Synapse224/TU_pretrain_R50-ViT-B_16_skip3_epo10_bs24_224
12 test iterations per epoch
inference image shape: torch.Size([1, 148, 512, 512])
inference label shape: torch.Size([1, 148, 512, 512])
inference case_name: case0008
idx 0 case case0008 mean_dice 0.377063 mean_hd95 16.786230
inference image shape: torch.Size([1, 89, 512, 512])
inference label shape: torch.Size([1, 89, 512, 512])
inference case_name: case0022
idx 1 case case0022 mean_dice 0.414102 mean_hd95 14.275609
inference image shape: torch.Size([1, 100, 512, 512])
inference label shape: torch.Size([1, 100, 512, 512])
inference case_name: case0038
idx 2 case case0038 mean_dice 0.384885 mean_hd95 45.485064
inference image shape: torch.Size([1, 184, 512, 512])
inference label shape: torch.Size([1, 184, 512, 512])
inference case_name: case0036
idx 3 case case0036 mean_dice 0.385577 mean_hd95 15.364531
inference image shape: torch.Size([1, 144, 512, 512])
inference label shape: torch.Size([1, 144, 512, 512])
inference case_name: case0032
idx 4 case case0032 mean_dice 0.353169 mean_hd95 24.275997
inference image shape: torch.Size([1, 139, 512, 512])
inference label shape: torch.Size([1, 139, 512, 512])
inference case_name: case0002
idx 5 case case0002 mean_dice 0.380761 mean_hd95 13.598584
inference image shape: torch.Size([1, 100, 512, 512])
inference label shape: torch.Size([1, 100, 512, 512])
inference case_name: case0029
idx 6 case case0029 mean_dice 0.384324 mean_hd95 12.909461
inference image shape: torch.Size([1, 198, 512, 512])
inference label shape: torch.Size([1, 198, 512, 512])
inference case_name: case0003
idx 7 case case0003 mean_dice 0.301419 mean_hd95 56.397249
inference image shape: torch.Size([1, 147, 512, 512])
inference label shape: torch.Size([1, 147, 512, 512])
inference case_name: case0001
idx 8 case case0001 mean_dice 0.371741 mean_hd95 39.711586
inference image shape: torch.Size([1, 140, 512, 512])
inference label shape: torch.Size([1, 140, 512, 512])
inference case_name: case0004
idx 9 case case0004 mean_dice 0.354844 mean_hd95 21.418066
inference image shape: torch.Size([1, 85, 512, 512])
inference label shape: torch.Size([1, 85, 512, 512])
inference case_name: case0025
idx 10 case case0025 mean_dice 0.367019 mean_hd95 31.297021
inference image shape: torch.Size([1, 94, 512, 512])
inference label shape: torch.Size([1, 94, 512, 512])
inference case_name: case0035
idx 11 case case0035 mean_dice 0.367058 mean_hd95 13.750266
Mean class 1 mean_dice 0.789790 mean_hd95 17.706903
Mean class 2 mean_dice 0.000000 mean_hd95 0.000000
Mean class 3 mean_dice 0.000000 mean_hd95 0.000000
Mean class 4 mean_dice 0.000000 mean_hd95 0.000000
Mean class 5 mean_dice 0.909266 mean_hd95 27.154499
Mean class 6 mean_dice 0.000000 mean_hd95 0.000000
Mean class 7 mean_dice 0.801578 mean_hd95 64.002044
Mean class 8 mean_dice 0.460675 mean_hd95 94.649663
Testing performance in best val model: mean_dice : 0.370164 mean_hd95 : 25.439139
